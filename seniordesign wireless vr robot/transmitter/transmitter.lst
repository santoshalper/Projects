;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 12/2/2013 7:38:58 PM
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x295F      	GOTO       351
_Delay_1us:
;__Lib_Delays.c,7 :: 		void Delay_1us() {
;__Lib_Delays.c,8 :: 		Delay_us(1);
0x0003	0x0000      	NOP
0x0004	0x0000      	NOP
0x0005	0x0000      	NOP
0x0006	0x0000      	NOP
;__Lib_Delays.c,9 :: 		}
L_end_Delay_1us:
0x0007	0x0008      	RETURN
; end of _Delay_1us
_Delay_22us:
;__Lib_Delays.c,15 :: 		void Delay_22us() {
;__Lib_Delays.c,16 :: 		Delay_us(22);
0x0008	0x301D      	MOVLW      29
0x0009	0x00FD      	MOVWF      R13
L_Delay_22us1:
0x000A	0x0BFD      	DECFSZ     R13, 1
0x000B	0x280A      	GOTO       L_Delay_22us1
;__Lib_Delays.c,17 :: 		}
L_end_Delay_22us:
0x000C	0x0008      	RETURN
; end of _Delay_22us
_Soft_SPI_Write:
;__Lib_SoftSPI.c,21 :: 		
;__Lib_SoftSPI.c,22 :: 		
0x000D	0x3080      	MOVLW      128
0x000E	0x0020      	MOVLB      0
0x000F	0x00D7      	MOVWF      Soft_SPI_Write_i_L0
;__Lib_SoftSPI.c,24 :: 		
0x0010	0x09D6      	COMF       FARG_Soft_SPI_Write_sdata, 1
;__Lib_SoftSPI.c,25 :: 		
L_Soft_SPI_Write0:
0x0011	0x0857      	MOVF       Soft_SPI_Write_i_L0, 0
0x0012	0x1903      	BTFSC      STATUS, 2
0x0013	0x2829      	GOTO       L_Soft_SPI_Write1
;__Lib_SoftSPI.c,26 :: 		
0x0014	0x0857      	MOVF       Soft_SPI_Write_i_L0, 0
0x0015	0x0556      	ANDWF      FARG_Soft_SPI_Write_sdata, 0
0x0016	0x00F1      	MOVWF      R1
0x0017	0x0871      	MOVF       R1, 0
0x0018	0x3001      	MOVLW      1
0x0019	0x1D03      	BTFSS      STATUS, 2
0x001A	0x3000      	MOVLW      0
0x001B	0x00F0      	MOVWF      R0
0x001C	0x1870      	BTFSC      R0, 0
0x001D	0x2820      	GOTO       L__Soft_SPI_Write7
0x001E	0x138E      	BCF        SoftSpi_SDO, BitPos(SoftSpi_SDO+0)
0x001F	0x2821      	GOTO       L__Soft_SPI_Write8
L__Soft_SPI_Write7:
0x0020	0x178E      	BSF        SoftSpi_SDO, BitPos(SoftSpi_SDO+0)
L__Soft_SPI_Write8:
;__Lib_SoftSPI.c,27 :: 		
0x0021	0x2003      	CALL       _Delay_1us
;__Lib_SoftSPI.c,28 :: 		
0x0022	0x2003      	CALL       _Delay_1us
;__Lib_SoftSPI.c,29 :: 		
0x0023	0x170D      	BSF        SoftSpi_CLK, BitPos(SoftSpi_CLK+0)
;__Lib_SoftSPI.c,30 :: 		
0x0024	0x2008      	CALL       _Delay_22us
;__Lib_SoftSPI.c,31 :: 		
0x0025	0x130D      	BCF        SoftSpi_CLK, BitPos(SoftSpi_CLK+0)
;__Lib_SoftSPI.c,32 :: 		
0x0026	0x2008      	CALL       _Delay_22us
;__Lib_SoftSPI.c,33 :: 		
0x0027	0x36D7      	LSRF       Soft_SPI_Write_i_L0, 1
;__Lib_SoftSPI.c,34 :: 		
0x0028	0x2811      	GOTO       L_Soft_SPI_Write0
L_Soft_SPI_Write1:
;__Lib_SoftSPI.c,36 :: 		
L_end_Soft_SPI_Write:
0x0029	0x0008      	RETURN
; end of _Soft_SPI_Write
_UART1_Write:
;__Lib_UART_b75.c,53 :: 		
;__Lib_UART_b75.c,54 :: 		
L_UART1_Write3:
0x002A	0x0023      	MOVLB      3
0x002B	0x189E      	BTFSC      TXSTA, 1
0x002C	0x282F      	GOTO       L_UART1_Write4
;__Lib_UART_b75.c,55 :: 		
0x002D	0x0000      	NOP
0x002E	0x282A      	GOTO       L_UART1_Write3
L_UART1_Write4:
;__Lib_UART_b75.c,56 :: 		
0x002F	0x0020      	MOVLB      0
0x0030	0x0856      	MOVF       FARG_UART1_Write_data_, 0
0x0031	0x0023      	MOVLB      3
0x0032	0x009A      	MOVWF      TXREG
;__Lib_UART_b75.c,57 :: 		
L_end_UART1_Write:
0x0033	0x0008      	RETURN
; end of _UART1_Write
_ADC_Get_Sample:
;__Lib_ADC.c,27 :: 		
;__Lib_ADC.c,28 :: 		
0x0034	0x3083      	MOVLW      131
0x0035	0x0021      	MOVLB      1
0x0036	0x059D      	ANDWF      ADCON0, 1
;__Lib_ADC.c,29 :: 		
0x0037	0x0020      	MOVLB      0
0x0038	0x084C      	MOVF       FARG_ADC_Get_Sample_channel, 0
0x0039	0x00F0      	MOVWF      R0
0x003A	0x35F0      	LSLF       R0, 1
0x003B	0x35F0      	LSLF       R0, 1
0x003C	0x0870      	MOVF       R0, 0
0x003D	0x0021      	MOVLB      1
0x003E	0x049D      	IORWF       ADCON0, 1
;__Lib_ADC.c,32 :: 		
0x003F	0x2008      	CALL       _Delay_22us
;__Lib_ADC.c,35 :: 		
0x0040	0x149D      	BSF        GO_NOT_DONE_bit, 1
;__Lib_ADC.c,38 :: 		
L_ADC_Get_Sample0:
0x0041	0x1C9D      	BTFSS      GO_NOT_DONE_bit, 1
0x0042	0x2844      	GOTO       L_ADC_Get_Sample1
;__Lib_ADC.c,39 :: 		
0x0043	0x2841      	GOTO       L_ADC_Get_Sample0
L_ADC_Get_Sample1:
;__Lib_ADC.c,41 :: 		
0x0044	0x081C      	MOVF       ADRESH, 0
0x0045	0x00F1      	MOVWF      R1
0x0046	0x01F0      	CLRF       R0
0x0047	0x081B      	MOVF       ADRESL, 0
0x0048	0x04F0      	IORWF       R0, 1
0x0049	0x3000      	MOVLW      0
0x004A	0x04F1      	IORWF       R1, 1
;__Lib_ADC.c,42 :: 		
L_end_ADC_Get_Sample:
0x004B	0x0008      	RETURN
; end of _ADC_Get_Sample
_burstwrite:
;transmitter.c,91 :: 		void burstwrite(int address, int* value, int length) {
;transmitter.c,92 :: 		int i = 0;
0x004C	0x0020      	MOVLB      0
0x004D	0x01D4      	CLRF       burstwrite_i_L0
0x004E	0x01D5      	CLRF       burstwrite_i_L0+1
;transmitter.c,94 :: 		NSS = 0;
0x004F	0x100E      	BCF        PORTC, 0
;transmitter.c,95 :: 		soft_spi_write(address&0xff);
0x0050	0x30FF      	MOVLW      255
0x0051	0x054C      	ANDWF      FARG_burstwrite_address, 0
0x0052	0x00D6      	MOVWF      FARG_Soft_SPI_Write_sdata
0x0053	0x200D      	CALL       _Soft_SPI_Write
;transmitter.c,96 :: 		while(i<length) {
L_burstwrite2:
0x0054	0x3080      	MOVLW      128
0x0055	0x0655      	XORWF      burstwrite_i_L0+1, 0
0x0056	0x00F0      	MOVWF      R0
0x0057	0x3080      	MOVLW      128
0x0058	0x0651      	XORWF      FARG_burstwrite_length+1, 0
0x0059	0x0270      	SUBWF      R0, 0
0x005A	0x1D03      	BTFSS      STATUS, 2
0x005B	0x285E      	GOTO       L__burstwrite9
0x005C	0x0850      	MOVF       FARG_burstwrite_length, 0
0x005D	0x0254      	SUBWF      burstwrite_i_L0, 0
L__burstwrite9:
0x005E	0x1803      	BTFSC      STATUS, 0
0x005F	0x2883      	GOTO       L_burstwrite3
;transmitter.c,97 :: 		j = value+i;
0x0060	0x0854      	MOVF       burstwrite_i_L0, 0
0x0061	0x00F0      	MOVWF      R0
0x0062	0x0855      	MOVF       burstwrite_i_L0+1, 0
0x0063	0x00F1      	MOVWF      R1
0x0064	0x35F0      	LSLF       R0, 1
0x0065	0x0DF1      	RLF        R1, 1
0x0066	0x084E      	MOVF       FARG_burstwrite_value, 0
0x0067	0x07F0      	ADDWF      R0, 1
0x0068	0x084F      	MOVF       FARG_burstwrite_value+1, 0
0x0069	0x3DF1      	ADDWFC     R1, 1
0x006A	0x0870      	MOVF       R0, 0
0x006B	0x00D2      	MOVWF      burstwrite_j_L0
0x006C	0x0871      	MOVF       R1, 0
0x006D	0x00D3      	MOVWF      burstwrite_j_L0+1
;transmitter.c,98 :: 		soft_spi_write(*j&0xFF);
0x006E	0x0870      	MOVF       R0, 0
0x006F	0x0084      	MOVWF      FSR0
0x0070	0x0871      	MOVF       R1, 0
0x0071	0x0085      	MOVWF      FSR0H
0x0072	0x30FF      	MOVLW      255
0x0073	0x0500      	ANDWF      INDF0, 0
0x0074	0x00D6      	MOVWF      FARG_Soft_SPI_Write_sdata
0x0075	0x200D      	CALL       _Soft_SPI_Write
;transmitter.c,99 :: 		Uart1_write(*j&0xFF);
0x0076	0x0852      	MOVF       burstwrite_j_L0, 0
0x0077	0x0084      	MOVWF      FSR0
0x0078	0x0853      	MOVF       burstwrite_j_L0+1, 0
0x0079	0x0085      	MOVWF      FSR0H
0x007A	0x30FF      	MOVLW      255
0x007B	0x0500      	ANDWF      INDF0, 0
0x007C	0x00D6      	MOVWF      FARG_UART1_Write_data_
0x007D	0x202A      	CALL       _UART1_Write
;transmitter.c,100 :: 		i++;
0x007E	0x0020      	MOVLB      0
0x007F	0x0AD4      	INCF       burstwrite_i_L0, 1
0x0080	0x1903      	BTFSC      STATUS, 2
0x0081	0x0AD5      	INCF       burstwrite_i_L0+1, 1
;transmitter.c,101 :: 		}
0x0082	0x2854      	GOTO       L_burstwrite2
L_burstwrite3:
;transmitter.c,102 :: 		NSS = 1;
0x0083	0x140E      	BSF        PORTC, 0
;transmitter.c,103 :: 		}
L_end_burstwrite:
0x0084	0x0008      	RETURN
; end of _burstwrite
_ADC_Init:
;__Lib_ADC.c,19 :: 		
;__Lib_ADC.c,20 :: 		
0x0085	0x3034      	MOVLW      _ADC_Get_Sample
0x0086	0x0020      	MOVLB      0
0x0087	0x00B0      	MOVWF      _ADC_Get_Sample_Ptr
0x0088	0x3000      	MOVLW      hi_addr(_ADC_Get_Sample)
0x0089	0x00B1      	MOVWF      _ADC_Get_Sample_Ptr+1
0x008A	0x304C      	MOVLW      FARG_ADC_Get_Sample_channel
0x008B	0x00B2      	MOVWF      _ADC_Get_Sample_Ptr+2
0x008C	0x3000      	MOVLW      hi_addr(FARG_ADC_Get_Sample_channel)
0x008D	0x00B3      	MOVWF      _ADC_Get_Sample_Ptr+3
;__Lib_ADC.c,21 :: 		
0x008E	0x30F0      	MOVLW      240
0x008F	0x0021      	MOVLB      1
0x0090	0x009E      	MOVWF      ADCON1
;__Lib_ADC.c,22 :: 		
0x0091	0x019D      	CLRF       ADCON0
;__Lib_ADC.c,23 :: 		
0x0092	0x141D      	BSF        ADON_bit, 0
;__Lib_ADC.c,24 :: 		
L_end_ADC_Init:
0x0093	0x0008      	RETURN
; end of _ADC_Init
_singlewrite:
;transmitter.c,85 :: 		void singlewrite(int address,int value){
;transmitter.c,86 :: 		NSS = 0;
0x0094	0x0020      	MOVLB      0
0x0095	0x100E      	BCF        PORTC, 0
;transmitter.c,87 :: 		soft_spi_write(address&0xff);
0x0096	0x30FF      	MOVLW      255
0x0097	0x054C      	ANDWF      FARG_singlewrite_address, 0
0x0098	0x00D6      	MOVWF      FARG_Soft_SPI_Write_sdata
0x0099	0x200D      	CALL       _Soft_SPI_Write
;transmitter.c,88 :: 		soft_spi_write(value&0xff);
0x009A	0x30FF      	MOVLW      255
0x009B	0x054E      	ANDWF      FARG_singlewrite_value, 0
0x009C	0x00D6      	MOVWF      FARG_Soft_SPI_Write_sdata
0x009D	0x200D      	CALL       _Soft_SPI_Write
;transmitter.c,89 :: 		NSS = 1;
0x009E	0x140E      	BSF        PORTC, 0
;transmitter.c,90 :: 		}
L_end_singlewrite:
0x009F	0x0008      	RETURN
; end of _singlewrite
_transmit:
;transmitter.c,117 :: 		void transmit(int* info) {
;transmitter.c,118 :: 		burstwrite(WRITE_TO_FIFO,info,PAYLOADSIZE);
0x00A0	0x3080      	MOVLW      128
0x00A1	0x0020      	MOVLB      0
0x00A2	0x00CC      	MOVWF      FARG_burstwrite_address
0x00A3	0x01CD      	CLRF       FARG_burstwrite_address+1
0x00A4	0x083E      	MOVF       FARG_transmit_info, 0
0x00A5	0x00CE      	MOVWF      FARG_burstwrite_value
0x00A6	0x083F      	MOVF       FARG_transmit_info+1, 0
0x00A7	0x00CF      	MOVWF      FARG_burstwrite_value+1
0x00A8	0x3005      	MOVLW      5
0x00A9	0x00D0      	MOVWF      FARG_burstwrite_length
0x00AA	0x3000      	MOVLW      0
0x00AB	0x00D1      	MOVWF      FARG_burstwrite_length+1
0x00AC	0x204C      	CALL       _burstwrite
;transmitter.c,119 :: 		singlewrite(OPMODEADD,TX);
0x00AD	0x3081      	MOVLW      129
0x00AE	0x00CC      	MOVWF      FARG_singlewrite_address
0x00AF	0x01CD      	CLRF       FARG_singlewrite_address+1
0x00B0	0x308C      	MOVLW      140
0x00B1	0x00CE      	MOVWF      FARG_singlewrite_value
0x00B2	0x01CF      	CLRF       FARG_singlewrite_value+1
0x00B3	0x2094      	CALL       _singlewrite
;transmitter.c,120 :: 		while(PacketSent != 1);//waiting to confirm packet sent
L_transmit4:
0x00B4	0x198E      	BTFSC      PORTC, 3
0x00B5	0x28B7      	GOTO       L_transmit5
0x00B6	0x28B4      	GOTO       L_transmit4
L_transmit5:
;transmitter.c,121 :: 		singlewrite(OPMODEADD,STDBY); //clear FIFO
0x00B7	0x3081      	MOVLW      129
0x00B8	0x00CC      	MOVWF      FARG_singlewrite_address
0x00B9	0x01CD      	CLRF       FARG_singlewrite_address+1
0x00BA	0x3084      	MOVLW      132
0x00BB	0x00CE      	MOVWF      FARG_singlewrite_value
0x00BC	0x01CF      	CLRF       FARG_singlewrite_value+1
0x00BD	0x2094      	CALL       _singlewrite
;transmitter.c,122 :: 		}
L_end_transmit:
0x00BE	0x0008      	RETURN
; end of _transmit
_ADC_Read:
;__Lib_ADC.c,44 :: 		
;__Lib_ADC.c,46 :: 		
0x00BF	0x2085      	CALL       _ADC_Init
;__Lib_ADC.c,47 :: 		
0x00C0	0x0020      	MOVLB      0
0x00C1	0x083E      	MOVF       FARG_ADC_Read_channel, 0
0x00C2	0x00CC      	MOVWF      FARG_ADC_Get_Sample_channel
0x00C3	0x2034      	CALL       _ADC_Get_Sample
;__Lib_ADC.c,48 :: 		
0x00C4	0x101D      	BCF        ADON_bit, 0
;__Lib_ADC.c,49 :: 		
;__Lib_ADC.c,50 :: 		
L_end_ADC_Read:
0x00C5	0x0008      	RETURN
; end of _ADC_Read
_init_transmitter:
;transmitter.c,106 :: 		void init_transmitter(void){
;transmitter.c,107 :: 		int freq[3] = {MSB433,MID433,LSB433};
0x00C6	0x306C      	MOVLW      108
0x00C7	0x0020      	MOVLB      0
0x00C8	0x00BE      	MOVWF      init_transmitter_freq_L0
0x00C9	0x3000      	MOVLW      0
0x00CA	0x00BF      	MOVWF      init_transmitter_freq_L0+1
0x00CB	0x3080      	MOVLW      128
0x00CC	0x00C0      	MOVWF      init_transmitter_freq_L0+2
0x00CD	0x3000      	MOVLW      0
0x00CE	0x00C1      	MOVWF      init_transmitter_freq_L0+3
0x00CF	0x01C2      	CLRF       init_transmitter_freq_L0+4
0x00D0	0x01C3      	CLRF       init_transmitter_freq_L0+5
0x00D1	0x3080      	MOVLW      128
0x00D2	0x00C4      	MOVWF      init_transmitter_sync_L0
0x00D3	0x3000      	MOVLW      0
0x00D4	0x00C5      	MOVWF      init_transmitter_sync_L0+1
0x00D5	0x30DB      	MOVLW      219
0x00D6	0x00C6      	MOVWF      init_transmitter_sync_L0+2
0x00D7	0x3000      	MOVLW      0
0x00D8	0x00C7      	MOVWF      init_transmitter_sync_L0+3
0x00D9	0x3068      	MOVLW      104
0x00DA	0x00C8      	MOVWF      init_transmitter_datarate_L0
0x00DB	0x3000      	MOVLW      0
0x00DC	0x00C9      	MOVWF      init_transmitter_datarate_L0+1
0x00DD	0x302B      	MOVLW      43
0x00DE	0x00CA      	MOVWF      init_transmitter_datarate_L0+2
0x00DF	0x3000      	MOVLW      0
0x00E0	0x00CB      	MOVWF      init_transmitter_datarate_L0+3
;transmitter.c,110 :: 		burstwrite(CARRIERADD,freq,3);
0x00E1	0x3087      	MOVLW      135
0x00E2	0x00CC      	MOVWF      FARG_burstwrite_address
0x00E3	0x01CD      	CLRF       FARG_burstwrite_address+1
0x00E4	0x303E      	MOVLW      init_transmitter_freq_L0
0x00E5	0x00CE      	MOVWF      FARG_burstwrite_value
0x00E6	0x3000      	MOVLW      hi_addr(init_transmitter_freq_L0)
0x00E7	0x00CF      	MOVWF      FARG_burstwrite_value+1
0x00E8	0x3003      	MOVLW      3
0x00E9	0x00D0      	MOVWF      FARG_burstwrite_length
0x00EA	0x3000      	MOVLW      0
0x00EB	0x00D1      	MOVWF      FARG_burstwrite_length+1
0x00EC	0x204C      	CALL       _burstwrite
;transmitter.c,111 :: 		burstwrite(DATARATE,datarate,2);
0x00ED	0x3083      	MOVLW      131
0x00EE	0x00CC      	MOVWF      FARG_burstwrite_address
0x00EF	0x01CD      	CLRF       FARG_burstwrite_address+1
0x00F0	0x3048      	MOVLW      init_transmitter_datarate_L0
0x00F1	0x00CE      	MOVWF      FARG_burstwrite_value
0x00F2	0x3000      	MOVLW      hi_addr(init_transmitter_datarate_L0)
0x00F3	0x00CF      	MOVWF      FARG_burstwrite_value+1
0x00F4	0x3002      	MOVLW      2
0x00F5	0x00D0      	MOVWF      FARG_burstwrite_length
0x00F6	0x3000      	MOVLW      0
0x00F7	0x00D1      	MOVWF      FARG_burstwrite_length+1
0x00F8	0x204C      	CALL       _burstwrite
;transmitter.c,112 :: 		singlewrite(OPMODEADD,STDBY);
0x00F9	0x3081      	MOVLW      129
0x00FA	0x00CC      	MOVWF      FARG_singlewrite_address
0x00FB	0x01CD      	CLRF       FARG_singlewrite_address+1
0x00FC	0x3084      	MOVLW      132
0x00FD	0x00CE      	MOVWF      FARG_singlewrite_value
0x00FE	0x01CF      	CLRF       FARG_singlewrite_value+1
0x00FF	0x2094      	CALL       _singlewrite
;transmitter.c,113 :: 		singlewrite(FIFO_THRESH,THRESH);
0x0100	0x30BC      	MOVLW      188
0x0101	0x00CC      	MOVWF      FARG_singlewrite_address
0x0102	0x01CD      	CLRF       FARG_singlewrite_address+1
0x0103	0x3004      	MOVLW      4
0x0104	0x00CE      	MOVWF      FARG_singlewrite_value
0x0105	0x3000      	MOVLW      0
0x0106	0x00CF      	MOVWF      FARG_singlewrite_value+1
0x0107	0x2094      	CALL       _singlewrite
;transmitter.c,114 :: 		burstwrite(SYNC_WORD,sync,2);
0x0108	0x30AE      	MOVLW      174
0x0109	0x00CC      	MOVWF      FARG_burstwrite_address
0x010A	0x01CD      	CLRF       FARG_burstwrite_address+1
0x010B	0x3044      	MOVLW      init_transmitter_sync_L0
0x010C	0x00CE      	MOVWF      FARG_burstwrite_value
0x010D	0x3000      	MOVLW      hi_addr(init_transmitter_sync_L0)
0x010E	0x00CF      	MOVWF      FARG_burstwrite_value+1
0x010F	0x3002      	MOVLW      2
0x0110	0x00D0      	MOVWF      FARG_burstwrite_length
0x0111	0x3000      	MOVLW      0
0x0112	0x00D1      	MOVWF      FARG_burstwrite_length+1
0x0113	0x204C      	CALL       _burstwrite
;transmitter.c,115 :: 		singlewrite(PACKET_LENGTH,PAYLOADSIZE);
0x0114	0x30B8      	MOVLW      184
0x0115	0x00CC      	MOVWF      FARG_singlewrite_address
0x0116	0x01CD      	CLRF       FARG_singlewrite_address+1
0x0117	0x3005      	MOVLW      5
0x0118	0x00CE      	MOVWF      FARG_singlewrite_value
0x0119	0x3000      	MOVLW      0
0x011A	0x00CF      	MOVWF      FARG_singlewrite_value+1
0x011B	0x2094      	CALL       _singlewrite
;transmitter.c,116 :: 		}
L_end_init_transmitter:
0x011C	0x0008      	RETURN
; end of _init_transmitter
_UART1_Init:
;__Lib_UART_b75.c,12 :: 		
;__Lib_UART_b75.c,15 :: 		
0x011D	0x302A      	MOVLW      _UART1_Write
0x011E	0x0020      	MOVLB      0
0x011F	0x00AC      	MOVWF      _UART_Wr_Ptr
0x0120	0x3000      	MOVLW      hi_addr(_UART1_Write)
0x0121	0x00AD      	MOVWF      _UART_Wr_Ptr+1
0x0122	0x3056      	MOVLW      FARG_UART1_Write_data_
0x0123	0x00AE      	MOVWF      _UART_Wr_Ptr+2
0x0124	0x3000      	MOVLW      hi_addr(FARG_UART1_Write_data_)
0x0125	0x00AF      	MOVWF      _UART_Wr_Ptr+3
;__Lib_UART_b75.c,16 :: 		
0x0126	0x30FF      	MOVLW      _UART1_Read
0x0127	0x00A8      	MOVWF      _UART_Rd_Ptr
0x0128	0x30FF      	MOVLW      hi_addr(_UART1_Read)
0x0129	0x00A9      	MOVWF      _UART_Rd_Ptr+1
0x012A	0x3000      	MOVLW      0
0x012B	0x00AA      	MOVWF      _UART_Rd_Ptr+2
0x012C	0x3000      	MOVLW      0
0x012D	0x00AB      	MOVWF      _UART_Rd_Ptr+3
;__Lib_UART_b75.c,17 :: 		
0x012E	0x30FF      	MOVLW      _UART1_Data_Ready
0x012F	0x00A0      	MOVWF      _UART_Rdy_Ptr
0x0130	0x30FF      	MOVLW      hi_addr(_UART1_Data_Ready)
0x0131	0x00A1      	MOVWF      _UART_Rdy_Ptr+1
0x0132	0x3000      	MOVLW      0
0x0133	0x00A2      	MOVWF      _UART_Rdy_Ptr+2
0x0134	0x3000      	MOVLW      0
0x0135	0x00A3      	MOVWF      _UART_Rdy_Ptr+3
;__Lib_UART_b75.c,18 :: 		
0x0136	0x30FF      	MOVLW      _UART1_Tx_Idle
0x0137	0x00A4      	MOVWF      _UART_Tx_Idle_Ptr
0x0138	0x30FF      	MOVLW      hi_addr(_UART1_Tx_Idle)
0x0139	0x00A5      	MOVWF      _UART_Tx_Idle_Ptr+1
0x013A	0x3000      	MOVLW      0
0x013B	0x00A6      	MOVWF      _UART_Tx_Idle_Ptr+2
0x013C	0x3000      	MOVLW      0
0x013D	0x00A7      	MOVWF      _UART_Tx_Idle_Ptr+3
;__Lib_UART_b75.c,20 :: 		
0x013E	0x0023      	MOVLB      3
0x013F	0x169E      	BSF        TXSTA, 5
;__Lib_UART_b75.c,21 :: 		
0x0140	0x3090      	MOVLW      144
0x0141	0x009D      	MOVWF      RCSTA
;__Lib_UART_b75.c,22 :: 		
0x0142	0x0021      	MOVLB      1
0x0143	0x168D      	BSF        TRISB5_bit, 5
;__Lib_UART_b75.c,23 :: 		
0x0144	0x138D      	BCF        TRISB7_bit, 7
;__Lib_UART_b75.c,24 :: 		
L_UART1_Init0:
0x0145	0x0020      	MOVLB      0
0x0146	0x1E91      	BTFSS      PIR1, 5
0x0147	0x294C      	GOTO       L_UART1_Init1
;__Lib_UART_b75.c,25 :: 		
0x0148	0x0023      	MOVLB      3
0x0149	0x0819      	MOVF       RCREG, 0
0x014A	0x00F0      	MOVWF      R0
0x014B	0x2945      	GOTO       L_UART1_Init0
L_UART1_Init1:
;__Lib_UART_b75.c,26 :: 		
L_end_UART1_Init:
0x014C	0x0008      	RETURN
; end of _UART1_Init
___CC2DW:
;__Lib_System.c,71 :: 		
;__Lib_System.c,73 :: 		
_CC2DL_Loop1:
;__Lib_System.c,74 :: 		
0x014D	0x0012      	MOVIW      0, 2
;__Lib_System.c,75 :: 		
0x014E	0x001E      	MOVWI      FSR1++ 
;__Lib_System.c,76 :: 		
0x014F	0x03F0      	DECF       R0, 1
;__Lib_System.c,77 :: 		
0x0150	0x1D03      	BTFSS      STATUS, 2
;__Lib_System.c,78 :: 		
0x0151	0x294D      	GOTO       _CC2DL_Loop1
;__Lib_System.c,79 :: 		
0x0152	0x03F1      	DECF       R1, 1
;__Lib_System.c,80 :: 		
0x0153	0x1D03      	BTFSS      STATUS, 2
;__Lib_System.c,81 :: 		
0x0154	0x294D      	GOTO       _CC2DL_Loop1
;__Lib_System.c,83 :: 		
L_end___CC2DW:
0x0155	0x0008      	RETURN
; end of ___CC2DW
_Soft_SPI_Init:
;__Lib_SoftSPI.c,11 :: 		
;__Lib_SoftSPI.c,12 :: 		
0x0156	0x0021      	MOVLB      1
0x0157	0x160D      	BSF        SoftSpi_SDI_Direction, BitPos(SoftSpi_SDI_Direction+0)
;__Lib_SoftSPI.c,13 :: 		
0x0158	0x138E      	BCF        SoftSpi_SDO_Direction, BitPos(SoftSpi_SDO_Direction+0)
;__Lib_SoftSPI.c,14 :: 		
0x0159	0x130D      	BCF        SoftSpi_CLK_Direction, BitPos(SoftSpi_CLK_Direction+0)
;__Lib_SoftSPI.c,16 :: 		
0x015A	0x0020      	MOVLB      0
0x015B	0x120D      	BCF        SoftSpi_SDI, BitPos(SoftSpi_SDI+0)
;__Lib_SoftSPI.c,17 :: 		
0x015C	0x138E      	BCF        SoftSpi_SDO, BitPos(SoftSpi_SDO+0)
;__Lib_SoftSPI.c,18 :: 		
0x015D	0x130D      	BCF        SoftSpi_CLK, BitPos(SoftSpi_CLK+0)
;__Lib_SoftSPI.c,19 :: 		
L_end_Soft_SPI_Init:
0x015E	0x0008      	RETURN
; end of _Soft_SPI_Init
_main:
;transmitter.c,57 :: 		void main() {
;transmitter.c,59 :: 		int i,j = 0;
;transmitter.c,60 :: 		OSCCON = 0x78; //16 MHz clock
0x015F	0x3078      	MOVLW      120
0x0160	0x0021      	MOVLB      1
0x0161	0x0099      	MOVWF      OSCCON
;transmitter.c,61 :: 		INTCON = 0;
0x0162	0x018B      	CLRF       INTCON
;transmitter.c,62 :: 		TRISA = 0xFF;TRISB=0xFF;
0x0163	0x30FF      	MOVLW      255
0x0164	0x008C      	MOVWF      TRISA
0x0165	0x30FF      	MOVLW      255
0x0166	0x008D      	MOVWF      TRISB
;transmitter.c,63 :: 		TRISC = 0xFE;//b3  is input
0x0167	0x30FE      	MOVLW      254
0x0168	0x008E      	MOVWF      TRISC
;transmitter.c,64 :: 		NSS = 1;
0x0169	0x0020      	MOVLB      0
0x016A	0x140E      	BSF        PORTC, 0
;transmitter.c,65 :: 		ANSELA = 0x00;
0x016B	0x0023      	MOVLB      3
0x016C	0x018C      	CLRF       ANSELA
;transmitter.c,66 :: 		ANSELB = 0x00;
0x016D	0x018D      	CLRF       ANSELB
;transmitter.c,67 :: 		ANSELC = 0x00;
0x016E	0x018E      	CLRF       ANSELC
;transmitter.c,68 :: 		ANSELA.B4 = 1;
0x016F	0x160C      	BSF        ANSELA, 4
;transmitter.c,69 :: 		ANSELA.B2 = 1;
0x0170	0x150C      	BSF        ANSELA, 2
;transmitter.c,70 :: 		C1ON_BIT = 0;
0x0171	0x0022      	MOVLB      2
0x0172	0x1391      	BCF        C1ON_bit, 7
;transmitter.c,71 :: 		C2ON_BIT = 0;
0x0173	0x1393      	BCF        C2ON_bit, 7
;transmitter.c,72 :: 		Soft_SPI_Init();
0x0174	0x2156      	CALL       _Soft_SPI_Init
;transmitter.c,73 :: 		uart1_init(9600);
0x0175	0x0023      	MOVLB      3
0x0176	0x159F      	BSF        BAUDCON, 3
0x0177	0x30A0      	MOVLW      160
0x0178	0x009B      	MOVWF      SPBRG
0x0179	0x3001      	MOVLW      1
0x017A	0x009C      	MOVWF      SPBRG+1
0x017B	0x151E      	BSF        TXSTA, 2
0x017C	0x211D      	CALL       _UART1_Init
;transmitter.c,74 :: 		SSP1STAT |= 0x40;
0x017D	0x0024      	MOVLB      4
0x017E	0x1714      	BSF        SSP1STAT, 6
;transmitter.c,75 :: 		init_transmitter();
0x017F	0x20C6      	CALL       _init_transmitter
;transmitter.c,76 :: 		while(1){
L_main0:
;transmitter.c,77 :: 		stuff[0] = ADC_Read(2)>>2;
0x0180	0x3002      	MOVLW      2
0x0181	0x00BE      	MOVWF      FARG_ADC_Read_channel
0x0182	0x20BF      	CALL       _ADC_Read
0x0183	0x0870      	MOVF       R0, 0
0x0184	0x0020      	MOVLB      0
0x0185	0x00B4      	MOVWF      main_stuff_L0
0x0186	0x0871      	MOVF       R1, 0
0x0187	0x00B5      	MOVWF      main_stuff_L0+1
0x0188	0x36B5      	LSRF       main_stuff_L0+1, 1
0x0189	0x0CB4      	RRF        main_stuff_L0, 1
0x018A	0x36B5      	LSRF       main_stuff_L0+1, 1
0x018B	0x0CB4      	RRF        main_stuff_L0, 1
;transmitter.c,78 :: 		stuff[1] = ADC_Read(3)>>2;
0x018C	0x3003      	MOVLW      3
0x018D	0x00BE      	MOVWF      FARG_ADC_Read_channel
0x018E	0x20BF      	CALL       _ADC_Read
0x018F	0x0870      	MOVF       R0, 0
0x0190	0x0020      	MOVLB      0
0x0191	0x00B6      	MOVWF      main_stuff_L0+2
0x0192	0x0871      	MOVF       R1, 0
0x0193	0x00B7      	MOVWF      main_stuff_L0+3
0x0194	0x36B7      	LSRF       main_stuff_L0+3, 1
0x0195	0x0CB6      	RRF        main_stuff_L0+2, 1
0x0196	0x36B7      	LSRF       main_stuff_L0+3, 1
0x0197	0x0CB6      	RRF        main_stuff_L0+2, 1
;transmitter.c,79 :: 		stuff[2] = 0x0f;
0x0198	0x300F      	MOVLW      15
0x0199	0x00B8      	MOVWF      main_stuff_L0+4
0x019A	0x3000      	MOVLW      0
0x019B	0x00B9      	MOVWF      main_stuff_L0+5
;transmitter.c,80 :: 		stuff[3] = 0x0a;
0x019C	0x300A      	MOVLW      10
0x019D	0x00BA      	MOVWF      main_stuff_L0+6
0x019E	0x3000      	MOVLW      0
0x019F	0x00BB      	MOVWF      main_stuff_L0+7
;transmitter.c,81 :: 		stuff[4] = 0x0c;
0x01A0	0x300C      	MOVLW      12
0x01A1	0x00BC      	MOVWF      main_stuff_L0+8
0x01A2	0x3000      	MOVLW      0
0x01A3	0x00BD      	MOVWF      main_stuff_L0+9
;transmitter.c,82 :: 		transmit(stuff);
0x01A4	0x3034      	MOVLW      main_stuff_L0
0x01A5	0x00BE      	MOVWF      FARG_transmit_info
0x01A6	0x3000      	MOVLW      hi_addr(main_stuff_L0)
0x01A7	0x00BF      	MOVWF      FARG_transmit_info+1
0x01A8	0x20A0      	CALL       _transmit
;transmitter.c,83 :: 		}
0x01A9	0x2980      	GOTO       L_main0
;transmitter.c,84 :: 		}
L_end_main:
0x01AA	0x29AA      	GOTO       $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0003       [5]    _Delay_1us
0x0008       [5]    _Delay_22us
0x000D      [29]    _Soft_SPI_Write
0x002A      [10]    _UART1_Write
0x0034      [24]    _ADC_Get_Sample
0x004C      [57]    _burstwrite
0x0085      [15]    _ADC_Init
0x0094      [12]    _singlewrite
0x00A0      [31]    _transmit
0x00BF       [7]    _ADC_Read
0x00C6      [87]    _init_transmitter
0x011D      [48]    _UART1_Init
0x014D       [9]    ___CC2DW
0x0156       [9]    _Soft_SPI_Init
0x015F      [76]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    INDF0
0x0001       [1]    INDF1
0x0003       [1]    STATUS
0x0004       [1]    FSR0L
0x0005       [1]    FSR0H
0x0006       [1]    FSR1L
0x0007       [1]    FSR1H
0x000A       [1]    PCLATH
0x000B       [1]    INTCON
0x000D       [0]    SoftSpi_SDI
0x000D       [0]    RB4_bit
0x000D       [0]    SoftSpi_CLK
0x000D       [0]    RB6_bit
0x000E       [1]    PORTC
0x000E       [0]    SoftSpi_SDO
0x000E       [0]    RC7_bit
0x0011       [1]    PIR1
0x0020       [4]    _UART_Rdy_Ptr
0x0024       [4]    _UART_Tx_Idle_Ptr
0x0028       [4]    _UART_Rd_Ptr
0x002C       [4]    _UART_Wr_Ptr
0x0030       [4]    _ADC_Get_Sample_Ptr
0x0034      [10]    main_stuff_L0
0x003E       [6]    init_transmitter_freq_L0
0x003E       [1]    FARG_ADC_Read_channel
0x003E       [2]    FARG_transmit_info
0x0044       [4]    init_transmitter_sync_L0
0x0048       [4]    init_transmitter_datarate_L0
0x004C       [2]    FARG_singlewrite_address
0x004C       [2]    FARG_burstwrite_address
0x004C       [1]    FARG_ADC_Get_Sample_channel
0x004E       [2]    FARG_burstwrite_value
0x004E       [2]    FARG_singlewrite_value
0x0050       [2]    FARG_burstwrite_length
0x0052       [2]    burstwrite_j_L0
0x0054       [2]    burstwrite_i_L0
0x0056       [1]    FARG_UART1_Write_data_
0x0056       [1]    FARG_Soft_SPI_Write_sdata
0x0057       [1]    Soft_SPI_Write_i_L0
0x0070       [1]    R0
0x0071       [1]    R1
0x0072       [1]    R2
0x0073       [1]    R3
0x0074       [1]    R4
0x0075       [1]    R5
0x0076       [1]    R6
0x0077       [1]    R7
0x0078       [1]    R8
0x0079       [1]    R9
0x007A       [1]    R10
0x007B       [1]    R11
0x007C       [1]    R12
0x007D       [1]    R13
0x007E       [1]    R14
0x007F       [1]    R15
0x008C       [1]    TRISA
0x008D       [0]    SoftSpi_SDI_Direction
0x008D       [0]    TRISB6_bit
0x008D       [0]    SoftSpi_CLK_Direction
0x008D       [1]    TRISB
0x008D       [0]    TRISB4_bit
0x008D       [0]    TRISB5_bit
0x008D       [0]    TRISB7_bit
0x008E       [0]    TRISC7_bit
0x008E       [1]    TRISC
0x008E       [0]    SoftSpi_SDO_Direction
0x0099       [1]    OSCCON
0x009B       [1]    ADRESL
0x009C       [1]    ADRESH
0x009D       [1]    ADCON0
0x009D       [0]    ADON_bit
0x009D       [0]    GO_NOT_DONE_bit
0x009E       [1]    ADCON1
0x0111       [0]    C1ON_bit
0x0113       [0]    C2ON_bit
0x018C       [1]    ANSELA
0x018D       [1]    ANSELB
0x018E       [1]    ANSELC
0x0199       [1]    RCREG
0x019A       [1]    TXREG
0x019B       [2]    SPBRG
0x019C       [1]    SPBRGH
0x019D       [1]    RCSTA
0x019E       [1]    TXSTA
0x019F       [1]    BAUDCON
0x0214       [1]    SSP1STAT
//** Label List: ** 
//----------------------------------------------
  L_main0
  L_main1
  L_burstwrite2
  L_burstwrite3
  L_transmit4
  L_transmit5
  L_end_main
  _main
  L_end_singlewrite
  _singlewrite
  L_end_burstwrite
  _burstwrite
  L__burstwrite9
  L_end_init_transmitter
  _init_transmitter
  L_end_transmit
  _transmit
  L_ADC_Get_Sample0
  L_ADC_Get_Sample1
  L_end_ADC_Init
  _ADC_Init
  L_end_ADC_Get_Sample
  _ADC_Get_Sample
  L_end_ADC_Read
  _ADC_Read
  L_Delay_10us0
  L_Delay_22us1
  L_Delay_50us2
  L_Delay_80us3
  L_Delay_500us4
  L_Delay_5500us5
  L_Delay_1ms6
  L_Delay_5ms7
  L_Delay_8ms8
  L_Delay_10ms9
  L_Delay_100ms10
  L_Delay_1sec11
  L_boot16_Delay_5ms12
  L_Delay_Cyc13
  L_Delay_Cyc14
  L_VDelay_ms15
  L_VDelay_ms16
  L_VDelay_ms17
  L_VDelay_Advanced_ms18
  L_VDelay_Advanced_ms19
  L_VDelay_Advanced_ms20
  L_end_Get_Fosc_kHz
  _Get_Fosc_kHz
  L_end_Delay_1us
  _Delay_1us
  L_end_Delay_10us
  _Delay_10us
  L_end_Delay_22us
  _Delay_22us
  L_end_Delay_50us
  _Delay_50us
  L_end_Delay_80us
  _Delay_80us
  L_end_Delay_500us
  _Delay_500us
  L_end_Delay_5500us
  _Delay_5500us
  L_end_Delay_1ms
  _Delay_1ms
  L_end_Delay_5ms
  _Delay_5ms
  L_end_Delay_8ms
  _Delay_8ms
  L_end_Delay_10ms
  _Delay_10ms
  L_end_Delay_100ms
  _Delay_100ms
  L_end_Delay_1sec
  _Delay_1sec
  L_end_boot16_Delay_5ms
  _boot16_Delay_5ms
  L_end_Delay_Cyc
  _Delay_Cyc
  L_end_VDelay_ms
  _VDelay_ms
  L__VDelay_ms38
  L__VDelay_ms39
  L__VDelay_ms40
  L_end_VDelay_Advanced_ms
  _VDelay_Advanced_ms
  L__VDelay_Advanced_ms42
  L__VDelay_Advanced_ms43
  L__VDelay_Advanced_ms44
  L_Soft_SPI_Write0
  L_Soft_SPI_Write1
  L_Soft_SPI_Read2
  L_Soft_SPI_Read3
  L_Soft_SPI_Read4
  L_end_Soft_SPI_Init
  _Soft_SPI_Init
  L_end_Soft_SPI_Write
  _Soft_SPI_Write
  L__Soft_SPI_Write7
  L__Soft_SPI_Write8
  L_end_Soft_SPI_Read
  _Soft_SPI_Read
  L__Soft_SPI_Read10
  L__Soft_SPI_Read11
  L_CA2A_Loop
  L_CA2AW_Loop
  L_CS2S_Loop
  L_CS2S_End
  L_FZinS_Loop
  L_FZinS_End
  _CC2D_Loop1
  _CC2DL_Loop1
  L_end_____DoIFC
  _____DoIFC
  L_end___CA2A
  ___CA2A
  L_end___CA2AW
  ___CA2AW
  L_end___CS2S
  ___CS2S
  L_end___FZinS
  ___FZinS
  L_end___CC2D
  ___CC2D
  L_end___CC2DW
  ___CC2DW
  L_end_Swap
  _Swap
  L_UART1_Init0
  L_UART1_Init1
  L_UART1_Read2
  L_UART1_Write3
  L_UART1_Write4
  L_UART1_Write_Text5
  L_UART1_Write_Text6
  L_UART1_Read_Text7
  L_UART1_Read_Text8
  L_UART1_Read_Text9
  L_UART1_Read_Text10
  L_UART1_Read_Text11
  L_UART1_Read_Text12
  L_UART1_Read_Text13
  L_UART1_Read_Text14
  L_UART1_Read_Text15
  L_UART_Write_Text16
  L_UART_Write_Text17
  L_UART_Read_Text18
  L_UART_Read_Text19
  L_UART_Read_Text20
  L_UART_Read_Text21
  L_UART_Read_Text22
  L_UART_Read_Text23
  L_UART_Read_Text24
  L_UART_Read_Text25
  L_UART_Read_Text26
  L_end_UART1_Init
  _UART1_Init
  L_end_UART1_Data_Ready
  _UART1_Data_Ready
  L_end_UART1_Read
  _UART1_Read
  L_end_UART1_Tx_Idle
  _UART1_Tx_Idle
  L_end_UART1_Write
  _UART1_Write
  L_end_UART1_Write_Text
  _UART1_Write_Text
  L_end_UART1_Read_Text
  _UART1_Read_Text
  L_end_UART_Set_Active
  _UART_Set_Active
  L_end_UART_Write
  _UART_Write
  L_end_UART_Write_Text
  _UART_Write_Text
  L_end_UART_Read
  _UART_Read
  L_end_UART_Data_Ready
  _UART_Data_Ready
  L_end_UART_Read_Text
  _UART_Read_Text
  L_end_UART_Tx_Idle
  _UART_Tx_Idle
